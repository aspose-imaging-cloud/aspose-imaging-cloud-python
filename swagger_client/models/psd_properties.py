# coding: utf-8

"""
    Aspose.Imaging Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PsdProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bits_per_channel': 'int',
        'channels_count': 'int',
        'color_mode': 'str',
        'compression': 'str'
    }

    attribute_map = {
        'bits_per_channel': 'BitsPerChannel',
        'channels_count': 'ChannelsCount',
        'color_mode': 'ColorMode',
        'compression': 'Compression'
    }

    def __init__(self, bits_per_channel=None, channels_count=None, color_mode=None, compression=None):  # noqa: E501
        """PsdProperties - a model defined in Swagger"""  # noqa: E501

        self._bits_per_channel = None
        self._channels_count = None
        self._color_mode = None
        self._compression = None
        self.discriminator = None

        self.bits_per_channel = bits_per_channel
        self.channels_count = channels_count
        if color_mode is not None:
            self.color_mode = color_mode
        if compression is not None:
            self.compression = compression

    @property
    def bits_per_channel(self):
        """Gets the bits_per_channel of this PsdProperties.  # noqa: E501

        Gets or sets the bits per channel.  # noqa: E501

        :return: The bits_per_channel of this PsdProperties.  # noqa: E501
        :rtype: int
        """
        return self._bits_per_channel

    @bits_per_channel.setter
    def bits_per_channel(self, bits_per_channel):
        """Sets the bits_per_channel of this PsdProperties.

        Gets or sets the bits per channel.  # noqa: E501

        :param bits_per_channel: The bits_per_channel of this PsdProperties.  # noqa: E501
        :type: int
        """
        if bits_per_channel is None:
            raise ValueError("Invalid value for `bits_per_channel`, must not be `None`")  # noqa: E501

        self._bits_per_channel = bits_per_channel

    @property
    def channels_count(self):
        """Gets the channels_count of this PsdProperties.  # noqa: E501

        Gets or sets the channels count.  # noqa: E501

        :return: The channels_count of this PsdProperties.  # noqa: E501
        :rtype: int
        """
        return self._channels_count

    @channels_count.setter
    def channels_count(self, channels_count):
        """Sets the channels_count of this PsdProperties.

        Gets or sets the channels count.  # noqa: E501

        :param channels_count: The channels_count of this PsdProperties.  # noqa: E501
        :type: int
        """
        if channels_count is None:
            raise ValueError("Invalid value for `channels_count`, must not be `None`")  # noqa: E501

        self._channels_count = channels_count

    @property
    def color_mode(self):
        """Gets the color_mode of this PsdProperties.  # noqa: E501

        Gets or sets the color mode.  # noqa: E501

        :return: The color_mode of this PsdProperties.  # noqa: E501
        :rtype: str
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """Sets the color_mode of this PsdProperties.

        Gets or sets the color mode.  # noqa: E501

        :param color_mode: The color_mode of this PsdProperties.  # noqa: E501
        :type: str
        """

        self._color_mode = color_mode

    @property
    def compression(self):
        """Gets the compression of this PsdProperties.  # noqa: E501

        Gets or sets the compression.  # noqa: E501

        :return: The compression of this PsdProperties.  # noqa: E501
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this PsdProperties.

        Gets or sets the compression.  # noqa: E501

        :param compression: The compression of this PsdProperties.  # noqa: E501
        :type: str
        """

        self._compression = compression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PsdProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PsdProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
