# coding: utf-8

"""
    Aspose.Imaging Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from asposeimagingcloud.models.odg_metadata import OdgMetadata  # noqa: F401,E501
from asposeimagingcloud.models.odg_page import OdgPage  # noqa: F401,E501


class OdgProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_count': 'int',
        'metadata': 'OdgMetadata',
        'pages': 'list[OdgPage]'
    }

    attribute_map = {
        'page_count': 'PageCount',
        'metadata': 'Metadata',
        'pages': 'Pages'
    }

    def __init__(self, page_count=None, metadata=None, pages=None):  # noqa: E501
        """OdgProperties - a model defined in Swagger"""  # noqa: E501

        self._page_count = None
        self._metadata = None
        self._pages = None
        self.discriminator = None

        self.page_count = page_count
        if metadata is not None:
            self.metadata = metadata
        if pages is not None:
            self.pages = pages

    @property
    def page_count(self):
        """Gets the page_count of this OdgProperties.  # noqa: E501

        Gets or sets the page count.  # noqa: E501

        :return: The page_count of this OdgProperties.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this OdgProperties.

        Gets or sets the page count.  # noqa: E501

        :param page_count: The page_count of this OdgProperties.  # noqa: E501
        :type: int
        """
        if page_count is None:
            raise ValueError("Invalid value for `page_count`, must not be `None`")  # noqa: E501

        self._page_count = page_count

    @property
    def metadata(self):
        """Gets the metadata of this OdgProperties.  # noqa: E501

        Gets or sets the metadata.  # noqa: E501

        :return: The metadata of this OdgProperties.  # noqa: E501
        :rtype: OdgMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OdgProperties.

        Gets or sets the metadata.  # noqa: E501

        :param metadata: The metadata of this OdgProperties.  # noqa: E501
        :type: OdgMetadata
        """

        self._metadata = metadata

    @property
    def pages(self):
        """Gets the pages of this OdgProperties.  # noqa: E501

        Gets or sets the pages.  # noqa: E501

        :return: The pages of this OdgProperties.  # noqa: E501
        :rtype: list[OdgPage]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this OdgProperties.

        Gets or sets the pages.  # noqa: E501

        :param pages: The pages of this OdgProperties.  # noqa: E501
        :type: list[OdgPage]
        """

        self._pages = pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OdgProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OdgProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
